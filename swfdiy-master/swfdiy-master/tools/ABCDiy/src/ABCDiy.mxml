<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:local="*"
					   width="1024" height="768" creationComplete="onInit(event)" title="ABCDiy beta1 - made by ldx@swfdiy.com www.swfdiy.com">
	
	<fx:Script>
		<![CDATA[
			import com.swfdiy.data.ABC;
			import com.swfdiy.data.SWF;
			import com.swfdiy.data.SWFTag;
			import com.swfdiy.data.SWFTag.TagDoABC;
			import com.swfdiy.data.SWFTag.TagEnd;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			
			import spark.events.TextOperationEvent;
			
			[Bindable]
			[Embed(source="icon.jpg")] 
			public var iconSymbol1:Class; 
			
			[Bindable]
			private var scriptFiles:Object ;
			
			private var swf:SWF;
			private var swfTags:Array;
			private var scripts:Array;
			private var abcPages:Dictionary;
			public var showingABCPage:ABCPage;
			
			private var abcListData:ArrayCollection;
			
			private function onInit(e:Event):void {
				//scriptFiles = new ArrayCollection();
				//var b:ArrayCollection =  new ArrayCollection();
				//scriptFiles.addItem({label:"wori", children:[{label:"hei"}]});
				//scriptFiles.addItem({label:"wori2"});
				//scriptFiles.addItem(b);
				this.addEventListener("close_abcpage", onCloseABCPage);
				abcList.addEventListener('rendererDoubleClick', onItemDoubleClick);
				
				start_group.visible = true;
				abcPageContainer.visible = false;
			}
			
			protected function onOpenSWF(event:MouseEvent):void
			{
				var allFilter:FileFilter = new FileFilter("swf (*.swf)", "*.swf");
				
				Utils.openAndReadFile(_onClickOpen, allFilter);
			}	
			
			private function _onClickOpen(data:Array, files:Array):void {			
				swf = new SWF(data[0]);
				scripts = [];
				swf.startReadTags();	
				swfTags = [];
				abcPages = new Dictionary;
				
				while(1) {
					var start_pos:int = swf.pos;
					var tag:SWFTag = swf.read_tag() ;
					
					if (tag == null) {
						break;
					}
					
					
					if (tag is TagDoABC) {
						//var tagDoABC:TagDoABC =  tag as TagDoABC;
						
						//abcs.push(new ABCWrapper(tagDoABC));						
					}
					
					swfTags.push(tag);
				}
				
				var i:int;
				var j:int;
				
				scriptFiles = {children:[], label: files[0]};
				refreshABCList();
				
				
				
			}
			
			protected function onSaveSWF(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var i:int;
				var abci:int;
				for (i=0,abci=0;i<swfTags.length;i++) {
					if (swfTags[i] is TagDoABC) {
						var innerabc:ABC = TagDoABC(swfTags[i]).abc();
						if (innerabc.changed) {
							innerabc.refreshRawData();
							
							//refresh the tag
							TagDoABC(swfTags[i]).refreshRawData();
						}
						
						
						//if changed
						//TagDoABC(swfTags[i]).updateAbc(abcs[abci].getABC());
						
						//innerabc.refreshRawData();
						abci++;
					}
				}
				var new_swf_bytes:ByteArray = swf.make_swf_bytes_from_tags(swfTags, true);
				var f:FileReference = new FileReference;
				f.save(new_swf_bytes, "new.swf");
				
			}
			
			protected function onItemDoubleClick(event:MyEvent):void
			{
				trace(event.data);
				var wrapper:ABCWrapper = ABCWrapper(event.data);
				
				if (abcPages[wrapper]) {
					showABCPage(wrapper);
				} else {
					var abcPage:ABCPage = new ABCPage();
					abcPage.init(wrapper);
					abcPages[wrapper] = abcPage;
					showABCPage(wrapper);
				}
			}
			
			private function showABCPage(wrapper:ABCWrapper):void
			{
				// TODO Auto Generated method stub
				/*for (var i:String in abcPages) {
					abcPages[i].visible = false;
				}*/
				if (showingABCPage) {
					showingABCPage.visible = false;
					showingABCPage = null;
				}
				abcPages[wrapper].visible = true;
				//abcPages[showIndex].x = 
				abcPageContainer.addElement(abcPages[wrapper]);
				showingABCPage = abcPages[wrapper];
				start_group.visible = false;
				abcPageContainer.visible = true;
			}
			
			
			
			protected function onCloseABCPage(event:Event):void
			{
				start_group.visible = true;
				abcPageContainer.visible = false;
			}
			
			private function filterMyArrayCollection(item:Object):Boolean {
				var searchString:String = searchTxt.text.toLowerCase();
				var itemName:String = (item.label as String).toLowerCase();
				return itemName.indexOf(searchString) > -1;
			}
			
			
			protected function searchTxt_changeHandler(event:TextOperationEvent):void
			{
				abcListData.filterFunction = filterMyArrayCollection;
				abcListData.refresh();
			}
			
			
			
			protected function onSaveABCTag(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var i:int = abcList.selectedIndex;
				if (i<0) {
					return;
				}
				var item:ABCWrapper = ABCWrapper(abcList.selectedItem.value);
				var tag:TagDoABC = item.getTag();
				
				var innerabc:ABC = item.getABC();
				if (innerabc.changed) {
					innerabc.refreshRawData();
					
					tag.refreshRawData();
				}
				var new_swf_bytes:ByteArray = tag.tagData();
				var f:FileReference = new FileReference;
				var s:String = abcList.selectedItem.label;
				s = s.replace(/\//g,'_');
				f.save(new_swf_bytes, s + ".abc.tag");
			}
			
			protected function onInsertTag(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var allFilter:FileFilter = new FileFilter("tag (*.tag)", "*.tag");
				
				Utils.openAndReadFile(_onClickInsert, allFilter);
			}
			
		
			
			private function _onClickInsert(data:Array, files:Array):void {	
				var selectIndex:int = abcList.selectedIndex;
				if (selectIndex<0) {
					return;
				}
				
				var ba:ByteArray = data[0];
				var tag:SWFTag = SWF.read_tag_from_bytes(ba);
				if (tag) {
					insertTag(tag);
					
				}
				
			}
			
			private function insertTag(tag:SWFTag):void {
				var i:int;
				//find first ABC TAG or before end tag
				var newTags:Array = [];
				var inserted:Boolean = false;
				var selectIndex:int = abcList.selectedIndex;
				if (selectIndex<0) {
					return;
				}
				var selectedTag:TagDoABC = abcListData.getItemAt(selectIndex).value.getTag();
				
				for (i=0;i<swfTags.length;i++) {
					/*if (!inserted && swfTags[i] is TagDoABC) {
						newTags.push(tag);
						inserted = true;
					}*/
					if (!inserted && selectedTag == swfTags[i]) {
						if (chkAfter.selected) {
							newTags.push(swfTags[i]);
							newTags.push(tag);
							inserted = true;
						} else {
							newTags.push(tag);
							newTags.push(swfTags[i]);
							inserted = true;
						}
					} else {
						newTags.push(swfTags[i]);
					}
				}
				
				if (!inserted) {
					Alert.show("cannot find position to insert");
					return;
				}
				
				
				swfTags = newTags;
				
				
				if (tag is TagDoABC) {
					//insert 
					var abcWrapper:ABCWrapper = new ABCWrapper(TagDoABC(tag));
					
					var name:String = abcWrapper.getName();
					if (name == "") {
						name = "ABC" + (swfTags.length-1);
					}
					abcListData.addItem({ value: abcWrapper, label: name});
				}
				
				reSortABCList();
				//refreshABCList();
			}
			private function  refreshABCList():void {
				abcListData = new ArrayCollection;
				var i:int;
				for (i=0;i<swfTags.length;i++) {
					if (swfTags[i] is TagDoABC) {
						var abc:ABCWrapper = new ABCWrapper(swfTags[i]);
						var name:String = abc.getName();
						if (name == "") {
							name = "ABC" + i;
						}
						abcListData.addItem({ value: abc, label: name});
					}
					
					/*for (j=0;j<abc.scripts.length;j++) {
					var script:ScriptWrapper = abc.scripts[j];
					var sn:Array = script.getScriptName();
					if (sn.length <= 0) {
					continue;
					}
					scripts.push(script);
					addFile(sn, scripts.length-1);
					}*/
				}
				
				abcList.dataProvider =abcListData;
			}
			
			protected function onDeleteTag(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var selectIndex:int = abcList.selectedIndex;
				if (selectIndex<0) {
					return;
				}
		
				var abcWrapper:ABCWrapper = abcList.selectedItem.value;
				var tag:TagDoABC = abcWrapper.getTag();
				
				var newTags:Array = [];
				var i:int;
				for (i=0;i<swfTags.length;i++) {
					if (tag != swfTags[i]) {
						newTags.push(swfTags[i]);
					}
				}
				swfTags = newTags;
				
				abcListData.removeItemAt(selectIndex);
				
				reSortABCList();
				//refreshABCList();
			
			}
			
			private function reSortABCList():void
			{
				// TODO Auto Generated method stub
				//first reset all indexs;
				
				var i:int;
				var j:int;
				for (i=0;i<swfTags.length;i++) {
					if (swfTags[i] is TagDoABC) {
						for (j=0;j<abcListData.length;j++) {
							var wrapper:ABCWrapper = ABCWrapper(abcListData.getItemAt(j).value);
							if (swfTags[i] ==  wrapper.getTag()) {
								wrapper.index = i;
								break;
							}
						}
					}
					
				}
				var sort:Sort = new Sort();
				sort.compareFunction = abcListSort;
				//sort.fields = ['value'];
				abcListData.sort = sort;
				abcListData.refresh();
			}
			
			private function abcListSort(obj1:Object , obj2:Object, fields:Array = null):int{
				if (obj1.value.index < obj2.value.index) {
					return -1;
				}else if (obj1.value.index > obj2.value.index) {
					return 1;
				}
				return 0;
			}
			/*
			protected function onUp(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var selectIndex:int = abcList.selectedIndex;
				if (selectIndex<1) {
					return;
				}
				
				//swap tags
				var tag1:SWFTag = ABCWrapper(abcListData.getItemAt(selectIndex-1).value).getTag();
				var tag2:SWFTag = ABCWrapper(abcListData.getItemAt(selectIndex).value).getTag();
				swap_tag(tag1, tag2);
				reSortABCList();
			}
			
			protected function onDown(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var selectIndex:int = abcList.selectedIndex;
				if (selectIndex<0 || selectIndex>=abcListData.length - 1 ) {
					return;
				}
				//swap tags
				var tag1:SWFTag = ABCWrapper(abcListData.getItemAt(selectIndex).value).getTag();
				var tag2:SWFTag = ABCWrapper(abcListData.getItemAt(selectIndex+1).value).getTag();
				swap_tag(tag1, tag2);
				reSortABCList();
			}
			
			private function swap_tag(tag1:SWFTag, tag2:SWFTag):void {
				var i:int;
				var t1:int = -1;
				var t2:int = -1;
				for (i =0;i<swfTags.length;i++){
					if (swfTags[i] == tag1) {
						t1 = i;
					}
					
					if (swfTags[i] == tag2) {
						t2 = i;
					}
					if (t1!= -1 && t2 !=-1) {
						break;
					}
				}
				swfTags[t2] = tag1;
				swfTags[t1] = tag2;
			}*/
			
			protected function onTestPNG(event:MouseEvent):void
			{
				
				var allFilter:FileFilter = new FileFilter("png (*.png)", "*.png");
				
				Utils.openAndReadFile(_onClickOpen2, allFilter);
			}	
			
			private function _onClickOpen2(data:Array, files:Array):void {			
				var ba:ByteArray = decry(data[0]);
				var f:FileReference = new FileReference;
				f.save(ba,  "unpack.swf");
			}
			public  function decry(param1:ByteArray) : ByteArray
			{
				var _loc_2:* = new ByteArray();
				_loc_2.writeByte(67);
				_loc_2.writeByte(87);
				_loc_2.writeByte(83);
				param1.position = 21;
				param1.readBytes(_loc_2, 124, param1.bytesAvailable - 121);
				param1.readBytes(_loc_2, 3);
				return _loc_2;
			}//
			
			protected function onTestPNG2(event:MouseEvent):void
			{
				var allFilter:FileFilter = new FileFilter("swf (*.swf)", "*.swf");
				
				Utils.openAndReadFile(_onClickOpen3, allFilter);
			}
			
			private function _onClickOpen3(data:Array, files:Array):void {			
				var ba:ByteArray = data[0];
				var f:FileReference = new FileReference;
				var ba2:ByteArray = new ByteArray;
				var i:int;
				for (i=0;i<21;i++) {
					ba2.writeByte(0);
				}
				
				/*
				 * png:  21, xxxx, 121
				  * swf: 3,121, xxxx
				*/
				ba.position = 124;
				var l:int =  ba.bytesAvailable;
				ba.readBytes(ba2, 21, l);
				
				ba.position = 3;
				ba.readBytes(ba2, 21 + l, 121);
				f.save(ba2,  "2.png");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	


	<s:Group id="start_group" width="563" height="428">
		<s:Button x="16" y="28" label="openSWF" click="onOpenSWF(event)" height="40" width="85"/>
		<s:Button x="126" y="29" label="saveSWF" click="onSaveSWF(event)" height="40" width="85"/>
		<s:Button x="223" y="28" label="saveABCTag" click="onSaveABCTag(event)" height="40" width="98"/>
		<s:Button x="329" y="158" label="insertTag" click="onInsertTag(event)" height="40" width="98"/>
		<s:Button x="329" y="221" label="deleteTag" click="onDeleteTag(event)" height="40" width="98"/>
		<s:List id="abcList" x="11" y="122" width="310" height="288"  >
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer doubleClick="handleDoubleClick()" doubleClickEnabled="true">
						<fx:Script>
							<![CDATA[
								import spark.components.List;
								private function handleDoubleClick():void {
									var e:MyEvent = new MyEvent("rendererDoubleClick");
									e.data = data.value;
									owner.dispatchEvent(e);
								}
							]]>
						</fx:Script>
						<s:Label text="{data.label}" top="5" bottom="5" right="3" left="3" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
			
		</s:List>
		<s:Label x="15" y="76" width="209" height="12" text="double click to open ABC"/>
		<s:TextInput  x="11" y="92" width="310" id="searchTxt" change="searchTxt_changeHandler(event)"/>
		<s:CheckBox id="chkAfter" x="331" y="132" label="insert after"/>
	</s:Group>
	<s:Group id="abcPageContainer" x="0" y="0" width="1024" height="10" >
	
	</s:Group>
	<s:Button x="665" y="718" label="testPNG" click="onTestPNG(event)" height="40" width="85" visible="false"/>
	<s:Button x="773" y="718" label="packPNG" click="onTestPNG2(event)" height="40" width="85"  visible="false"/>
</s:WindowedApplication>
